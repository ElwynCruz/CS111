/*
NAME:  Elwyn Cruz
EMAIL: ElwynCruz@g.ucla.edu
ID:   104977892
 */
#include <stdio.h>
#include <stdlib.h>
#include <termios.h>
#include <unistd.h>
#include <getopt.h>
#include <fcntl.h>
#include <errno.h>
#include <signal.h>
#include <poll.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <mcrypt.h>
#include <netdb.h>
#include <string.h>

int pid;
// two pipes
int ptoc[2];
int ctop[2];
char CRLF[] = { 0x0D, 0x0A };
int fdKey;
MCRYPT fdEncrypt;
MCRYPT fdDecrypt;
int encrypt_flag;
char* key;
char* IV1;

void handler(int sigNum) {
  if (sigNum == SIGINT) {
    restore();
    print_shell_exit();
    kill (pid, SIGINT);
  }
  if (sigNum == SIGPIPE) {
    restore();
    print_shell_exit();
    exit(0);
  }
  if (sigNum == SIGTERM) {
    restore();
    print_shell_exit();
    exit(0);
  }
}

void restore() {
  if (encrypt_flag) {
    mcrypt_generic_deinit(fdEncrypt);
    mcrypt_module_close(fdEncrypt);
    mcrypt_generic_deinit(fdDecrypt);
    mcrypt_module_close(fdDecrypt);
  }
}
void print_shell_exit() {
  int status = 0;
  waitpid(0, &status, 0);
  fprintf(stderr, "SHELL EXIT SIGNAL=%d STATUS=%d\n", WTERMSIG(status), WEXITSTATUS(status));
}



int main(int argc, char *argv[]) {
  static struct option long_options[] = {
    {"port"   ,  required_argument,  0, 'p'},
    {"encrypt",  required_argument,  0, 'e'},
    {0,      0,                      0,  0 }
  };
  
  int c = 0;
  int portNum = 0;
  // get options
  while( (c = getopt_long(argc, argv, "p:e:", long_options, NULL)) != -1) {
    
    switch(c) {
    case 'p':
      portNum = atoi(optarg);
      signal(SIGINT, handler);
      signal(SIGPIPE, handler);
      signal(SIGTERM, handler);
      break;
    case 'e':
      fdKey = open(optarg, O_RDONLY);
      struct stat st;
      if (fstat(fdKey, &st)) {
	close(fdKey);
	fprintf(stderr, "Error: could not open key file");
	restore();
	exit(1);
      }
      int size = (int) st.st_size;
      key = (char*) malloc(size);
      read(fdKey, key, size);
      close(fdKey);

      //encryption
      fdEncrypt = mcrypt_module_open("twofish", NULL, "cfb", NULL);
      if (fdEncrypt == MCRYPT_FAILED) {
	fprintf(stderr, "Error: could not open module");
	restore();
	exit(1);
      }
      IV1 = malloc(mcrypt_enc_get_iv_size(fdEncrypt));
      int i;
      for (i = 0; i <mcrypt_enc_get_iv_size(fdEncrypt); i++) {
	IV1[i] = rand();
      }
      if (mcrypt_generic_init(fdEncrypt, key, 16, IV1) < 0) {
	fprintf(stderr, "Error: could not initialize encrypt\n");
	restore();
	exit(1);
      }

      //decryption
      fdDecrypt = mcrypt_module_open("twofish", NULL, "cfb", NULL);
      if(fdDecrypt == MCRYPT_FAILED) {
	fprintf(stderr, "Error: could not open module\n");
	restore();
	exit(1);
      }
      if (mcrypt_generic_init(fdDecrypt, key, 16, IV1) < 0) {
	fprintf(stderr, "Error: could not initialize encrypt\n");
	restore();
	exit(1);
      }
      encrypt_flag = 1;
      break;
    default: 
      fprintf(stderr, "Usage: ./lab1b-server --port=#\n");
      restore();
      exit(1);
    }
  }
  if ( !portNum ) {
    fprintf(stderr, "Usage: ./lab1b-server --port=#\n");
    restore();
    exit(1);
  }
      
  
  
  
  int sockfd;
  struct sockaddr_in serverAddr;
  
  sockfd = socket(AF_INET, SOCK_STREAM, 0);
  if (sockfd < 0) {
    fprintf(stderr, "Error: could not open socket\n");
    close(sockfd);
    exit(1);
  }
  serverAddr.sin_family = AF_INET;
  serverAddr.sin_port = htons(portNum);
  serverAddr.sin_addr.s_addr = INADDR_ANY;
  
  // bind host address using bind() call
  if (bind(sockfd, (struct sockaddr *) &serverAddr, sizeof(serverAddr)) < 0 ) {
    fprintf(stderr, "Error: could not bind host address\n");
    close(sockfd);
    exit(1);
  }
  //listen
  if (listen(sockfd, 5) < 0) {
    fprintf(stderr, "Error: could not listen for connections\n");
  }
  
  //accept
  struct sockaddr_in clientaddress;
  socklen_t clientlength = sizeof(clientaddress);
  int newsocket = accept(sockfd, (struct sockaddr *) &clientaddress, &clientlength);
  if (newsocket < 0) {
    fprintf(stderr, "Error: could not accept connection\n");
    close(newsocket);
    close(sockfd);
    exit(1);
  }
  
  // start communication
  
  if (pipe(ptoc) < 0) {
    fprintf(stderr, "Pipe 1 failed\n");
    exit(1);
  }
  if (pipe(ctop) < 0) {
    fprintf(stderr, "Pipe 2 failed\n");
    exit(1);
  }
  
  pid = fork();

  if (pid < 0) {  //error
    fprintf(stderr, "Error: could not fork\n");
    restore();
    print_shell_exit();
    close(newsocket);
    close(sockfd);
    exit(1);
  }
  else if (pid == 0) { // child
    close(ptoc[1]);
    close(ctop[0]);

    dup2(ptoc[0], STDIN_FILENO);
    dup2(ctop[1], STDOUT_FILENO);
    dup2(ctop[1], STDERR_FILENO);

    close(ptoc[0]);
    close(ctop[0]);
    if (execl("/bin/bash", "sh", (char*) NULL ) < 0) {
      fprintf(stderr, "Error: execl failed\n");
      restore();
      print_shell_exit();
      close(newsocket);
      close(sockfd);
      exit(1);
    }
  }
  else {    //parent
    close(ptoc[0]);
    close(ctop[1]);

    struct pollfd inputs[] = {
      {newsocket, POLLIN, 0},
      {ctop[0]  , POLLIN, 0}
    };

    while (1) {
      if (poll(inputs, 2, 0) < 0) {
	fprintf(stderr, "Error polling\n");
	restore();
	print_shell_exit();
	close(newsocket);
	close(sockfd);
	exit(1);
      }
      
      if (inputs[0].revents == POLLIN) {
	char buffer[256];
	//	memset((char*) &buffer, 0, 1);
	int i = read(newsocket,buffer, 256);
	if (i < 0) { //error
	  fprintf(stderr, "Error reading from socket");
	  exit(1);
	}
	else if (i == 0) {
	  kill(0, SIGTERM);
	}
	int j;
	for (j = 0; j < i; j++) {
	  if (encrypt_flag) {
	    mdecrypt_generic(fdDecrypt, buffer+j, 1);
	  }
	  if (buffer[j] == 0x0D || buffer[j] == 0x0A) { // CRLF
	    write(ptoc[1], CRLF+1, 1); 
	  }
	  else if (buffer[j] == 0x04) { // ^D
	    close(ptoc[1]);
	  }
	  else if (buffer[j] == 0x03) { // ^C
	    kill(pid, SIGINT);
	  }
	  else {
	    write(ptoc[1], buffer+j, 1);
	  }
	}
      }
      else if( inputs[0].revents == POLLERR) {
	fprintf(stderr, "Poll error with socket\n");
	exit(1);
      } 
      if (inputs[1].revents == POLLIN) {
	char buffer[256];
	int i = read(ctop[0], buffer, 256);
	if (i < 0) {
	  fprintf(stderr, "Error reading from shell\n");
	  restore();
	  print_shell_exit();
	  close(newsocket);
	  close(sockfd);
	  exit(0);
	}
	int j;
	for (j=0; j < i; j++) {
	  if (encrypt_flag) {
	    mcrypt_generic(fdEncrypt, buffer+j, 1);
	  }
	  write(newsocket, buffer+j, 1);
	}
      }
      else if (inputs[1].revents == POLLERR || inputs[1].revents & POLLHUP) {
	close(ctop[0]);
	exit(0);
      }				
    }
  }
  restore();
  print_shell_exit();
  close(newsocket);
  close(sockfd);
  
  return 0;
}
